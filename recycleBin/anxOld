#!/bin/bash

# Get the absolute path of the anx.js script
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
anx_js_path="$script_dir/anx.js"

# Function to process a single PDF file
process_pdf_file() {
    local pdf_file="$1"
    local image_output_path="$2"
    local image_format="$3"

    # Call pdfannots2json and store the output in the "annotations" variable
    annotations=$(pdfannots2json "$pdf_file" --image-output-path="$image_output_path" --image-format="$image_format")

    # Call the anx.js script and pass the annotations data, PDF file, and image_output_path as string arguments
    node "$anx_js_path" "$annotations" "$pdf_file" "$image_output_path"
}

# Function to find anx.cfg file in the current directory or parent directories
find_anx_cfg() {
    local dir="$1"
    local cfg_file

    while [[ "$dir" != "/" ]]; do
        cfg_file="$dir/anx.cfg"
        if [[ -f "$cfg_file" ]]; then
            echo "$cfg_file"
            return 0
        fi
        dir=$(dirname "$dir")
    done

    cfg_file="./anx.cfg"
    if [[ -f "$cfg_file" ]]; then
        echo "$cfg_file"
        return 0
    fi

    return 1
}

# Function to read default paths from anx.cfg file
read_default_paths() {
    local cfg_file="$1"

    if [[ -f "$cfg_file" ]]; then
        # Read the relative path from anx.cfg
        local relative_image_output_path=$(grep -E "^image_output_path=" "$cfg_file" | sed 's/^image_output_path=//')

        # Get the absolute path of the anx.cfg file
        local abs_cfg_file=$(realpath "$cfg_file")
        local config_dir=$(dirname "$abs_cfg_file")

        # Resolve the relative path using the config_dir as the base directory
        image_output_path_default=$(realpath --relative-to="$PWD" "$config_dir/$relative_image_output_path")
    fi
}

# Check if the --all flag is provided
if [[ $1 == "--all" ]]; then
    # Process all PDF files in the current directory and its subdirectories
    pdf_files=$(find . -type f -name "*.pdf")
    shift
elif [[ $1 == "--dir" ]]; then
    # Process all PDF files in the current directory
    pdf_files=$(find "$(pwd)" -maxdepth 1 -type f -name "*.pdf")
    shift
else
    # Check if the PDF file argument is provided
    if [ -z "$1" ]; then
        echo "No PDF file specified. Please provide the PDF file as an argument, use the --dir flag to process all PDF files in the current directory, or use the --all flag to process all PDF files in the current directory and its subdirectories."
        exit 1
    fi

    # Process a single PDF file
    pdf_files="$1"
    shift
fi

# Parse any additional command-line options
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        --image-output-path)
        image_output_path="$2"
        shift # past argument
        shift # past value
        ;;
        --image-format)
        image_format="$2"
        shift # past argument
        shift # past value
        ;;
        -h|--help)
        echo "Usage: anx.sh [--dir|--all] [<pdf_file>|--image-output-path <output_path>] [--image-format <format>]"
        exit 0
        ;;
        *)
        echo "Unrecognized option: $key"
        exit 1
        ;;
    esac
done

# Find anx.cfg file in the current directory or parent directories
cfg_file=$(find_anx_cfg "$(dirname "$PWD")")

# Read default paths from anx.cfg file if found
if [[ -n "$cfg_file" ]]; then
    read_default_paths "$cfg_file"
fi

# Set default values for other options if not provided
image_output_path="${image_output_path:-$image_output_path_default}"
image_format="${image_format:-png}"

# Set default image output path to "./img/" if not provided or fetched from anx.cfg
image_output_path="${image_output_path:-./img/}"

# Process each PDF file
for pdf_file in $pdf_files; do
    if [ -f "$pdf_file" ]; then
        # Process a single PDF file
        process_pdf_file "$pdf_file" "$image_output_path" "$image_format"
    else
        echo "Error: $pdf_file is not a valid file."
    fi
done

