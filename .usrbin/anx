#!/bin/bash
overwrite_md="false"

# Get the absolute path of the anx.js script
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
anx_js_path="$script_dir/anx.js"

# Create a local temp directory for processing
local_tmp_dir="$HOME/anx_tmp"
mkdir -p "$local_tmp_dir"

# Function to process a single PDF page
# process_pdf_page() {
#     local pdf_file="$1"
#     local page_number="$2"
#     local image_output_path="$3"
#     local image_format="$4"
#     local markdown_output_path="$5"
#     local link_style="$6"

#     # Extract the specific page using pdftk (or Ghostscript)
#     # pdftk "$pdf_file" cat $page_number output "page_$page_number.pdf"
#     pdftk "$pdf_file" cat $page_number output "$local_tmp_dir/page_$page_number.pdf"

#     # Call pdfannots2json for the extracted page and store the output in the "annotations" variable
#     annotations=$(pdfannots2json "page_$page_number.pdf" --image-output-path="$image_output_path" --image-format="$image_format")

#     # If annotations exist, call the anx.js script to process the annotations
#     if [[ -n "$annotations" && "$annotations" != "{}" ]]; then
#         # Pass annotations data, PDF file, and image_output_path to anx.js
#         node "$anx_js_path" "$annotations" "$pdf_file" "$image_output_path" "$markdown_output_path" "$page_number" "$link_style"
#     else
#         # If annotations are empty, skip processing
#         echo "No content for page $page_number in $pdf_file. Skipping..."
#     fi

#     # Clean up the extracted page after processing
#     rm "page_$page_number.pdf"
# }

process_pdf_page() {
    local pdf_file="$1"
    local page_number="$2"
    local image_output_path="$3"
    local image_format="$4"
    local markdown_output_path="$5"
    local link_style="$6"

    local page_pdf="$local_tmp_dir/page_$page_number.pdf"

    # Extract the specific page using pdftk (or Ghostscript)
    pdftk "$pdf_file" cat $page_number output "$page_pdf"

    # Call pdfannots2json for the extracted page and store the output in the "annotations" variable
    annotations=$(pdfannots2json "$page_pdf" --image-output-path="$image_output_path" --image-format="$image_format")

    # If annotations exist, call the anx.js script to process the annotations
    if [[ -n "$annotations" && "$annotations" != "{}" ]]; then
        node "$anx_js_path" "$annotations" "$pdf_file" "$image_output_path" "$markdown_output_path" "$page_number" "$link_style"
    else
        echo "No content for page $page_number in $pdf_file. Skipping..."
    fi

    # Clean up the extracted page after processing
    rm "$page_pdf"
}

# Function to find anx.cfg file in the current directory or parent directories
find_anx_cfg() {
    local dir="$1"
    local cfg_file

    while [[ "$dir" != "/" ]]; do
        cfg_file="$dir/anx.cfg"
        if [[ -f "$cfg_file" ]]; then
            echo "$cfg_file"
            return 0
        fi
        dir=$(dirname "$dir")
    done

    cfg_file="./anx.cfg"
    if [[ -f "$cfg_file" ]]; then
        echo "$cfg_file"
        return 0
    fi

    return 1
}

# Function to read default paths from anx.cfg file
read_default_paths() {
    local cfg_file="$1"

    if [[ -f "$cfg_file" ]]; then
        # Only read uncommented lines
        local relative_image_output_path=$(grep -E "^[[:space:]]*image_output_path=" "$cfg_file" | sed 's/^image_output_path=//')

        if [[ -n "$relative_image_output_path" ]]; then
            # Get the absolute path of the anx.cfg file
            local abs_cfg_file=$(realpath "$cfg_file")
            local config_dir=$(dirname "$abs_cfg_file")

            # Resolve the relative path using the config_dir as the base directory
            image_output_path_default=$(realpath --relative-to="$PWD" "$config_dir/$relative_image_output_path")
        else
            image_output_path_default=""
        fi
        # Read the link_style
        link_style=$(grep -E "^[[:space:]]*link_style=" "$cfg_file" | sed 's/^link_style=//')
    fi
}

# Function to prompt the user if they want to overwrite the existing markdown file
prompt_overwrite() {
    local markdown_output_path="$1"

    if [[ -f "$markdown_output_path" ]]; then
        if [[ "$overwrite_md" == "true" ]]; then
            > "$markdown_output_path"
            return
        fi
        echo "Overwrite extracted annotations (y/n)? [n]: "
        read -r user_input
        user_input="${user_input:-n}"

        if [[ "$user_input" == "y" || "$user_input" == "Y" ]]; then
            > "$markdown_output_path"
        fi
    fi
}

# Check if the --all flag is provided
if [[ $1 == "--all" ]]; then
    # Process all PDF files in the current directory and its subdirectories
    pdf_files=$(find . -type f -name "*.pdf")
    shift
elif [[ $1 == "--dir" ]]; then
    # Process all PDF files in the current directory
    pdf_files=$(find "$(pwd)" -maxdepth 1 -type f -name "*.pdf")
    shift
else
    # Check if the PDF file argument is provided
    if [ -z "$1" ]; then
        echo "No PDF file specified. Please provide the PDF file as an argument, use the --dir flag to process all PDF files in the current directory, or use the --all flag to process all PDF files in the current directory and its subdirectories."
        exit 1
    fi

    # Process a single PDF file
    pdf_files="$1"
    shift
fi

# Parse any additional command-line options
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        --image-output-path)
        image_output_path="$2"
        shift
        shift
        ;;
        --image-format)
        image_format="$2"
        shift
        shift
        ;;
        -y)
        overwrite_md="true"
        shift
        ;;
        -h|--help)
        echo "Usage: anx.sh [--dir|--all] [<pdf_file>|--image-output-path <output_path>] [--image-format <format>] [-y]"
        exit 0
        ;;
        *)
        echo "Unrecognized option: $key"
        exit 1
        ;;
    esac
done

# Find anx.cfg file in the current directory or parent directories
cfg_file=$(find_anx_cfg "$(dirname "$PWD")")


# Read default paths from anx.cfg file if found
if [[ -n "$cfg_file" ]]; then
    read_default_paths "$cfg_file"
fi

# Only set image_output_path if it was set by CLI or anx.cfg
if [[ -n "$image_output_path_default" && -z "$image_output_path" ]]; then
    image_output_path="$image_output_path_default"
fi

image_format="${image_format:-png}"


# pdf processing loop
for pdf_file in $pdf_files; do
    if [ -f "$pdf_file" ]; then
        original_pdf="$(realpath "$pdf_file")"
        local_pdf="$local_tmp_dir/$(basename "$pdf_file")"
        cp "$pdf_file" "$local_pdf"

        num_pages=$(pdfinfo "$local_pdf" | grep "Pages" | awk '{print $2}')
        markdown_output_path="${original_pdf%.pdf}.md"
        prompt_overwrite "$markdown_output_path"

        # Only use a global image_output_path if it was set by anx.cfg or CLI
        if [[ -n "$image_output_path" ]]; then
            page_image_output_path="$image_output_path"
            mkdir -p "$page_image_output_path"
        else
            # Use <dir_of_pdf>/img if not set by user/config
            pdf_dir="$(dirname "$original_pdf")"
            page_image_output_path="$pdf_dir/img"
            mkdir -p "$page_image_output_path"
        fi

        for ((page=1; page<=num_pages; page++)); do
            process_pdf_page "$local_pdf" "$page" "$page_image_output_path" "$image_format" "$markdown_output_path" "$link_style"
        done

        rm "$local_pdf"
    else
        echo "Error: $pdf_file is not a valid file."
    fi
done
rm -rf "$local_tmp_dir"
# Remove the local temp directory after processing all files
rm -rf "$local_tmp_dir"