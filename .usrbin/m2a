#!/usr/bin/env python3

import sys
import os
import re
import sys
import genanki
from pathlib import Path
import base64
import shutil
import argparse

def is_cloze(text):
    return bool(re.search(r'{{c\d+::.+?}}', text))

def convert_latex(md):
    # Convert $$...$$ to \[...\]
    md = re.sub(r'\$\$(.+?)\$\$', r'\\[\1\\]', md, flags=re.DOTALL)
    # Convert $...$ to \(...\)
    md = re.sub(r'\$(.+?)\$', r'\\(\1\\)', md)
    return md

def extract_image_paths(md):
    # Find all ![alt](path) and return set of paths
    return set(re.findall(r'!\[.*?\]\((.*?)\)', md))

def image_to_base64(path):
    with open(path, 'rb') as f:
        return base64.b64encode(f.read()).decode('utf-8')

def replace_images_with_anki(md, media_files):
    # Replace ![alt](path) with <img src="filename">
    def repl(match):
        path = match.group(1)
        filename = Path(path).name
        if path not in media_files:
            media_files[path] = filename
        return f'<img src="{filename}">'
    return re.sub(r'!\[.*?\]\((.*?)\)', repl, md)

def parse_cards(md):
    cards = []
    for block in md.split('#kk'):
        block = block.strip()
        if not block:
            continue
        # Split on first '%'
        parts = re.split(r'\s*%\s*', block, maxsplit=1)
        if len(parts) < 2:
            continue  # skip if not both delimiters present
        front = parts[0].strip()
        back = parts[1].strip()
        # Split back again at the next '%', if present
        back_parts = re.split(r'\s*%\s*', back, maxsplit=1)
        back = back_parts[0].strip()
        if front and back:
            cards.append((front, back))
    return cards



def extract_heading_tags(md):
    """
    Returns a list of (card_start_idx, tags) for each card.
    Each tags is a list of headings (from top to bottom) in effect at that position.
    """
    lines = md.splitlines()
    heading_stack = []
    card_indices = []
    tags_per_card = []
    idx = 0
    for i, line in enumerate(lines):
        heading_match = re.match(r'^(#+)\s+(.*)', line)
        if heading_match:
            level = len(heading_match.group(1))
            text = heading_match.group(2).strip()
            # Adjust stack to current level
            heading_stack = heading_stack[:level-1]
            heading_stack.append(text)
        if line.strip().startswith('#kk'):
            card_indices.append(i)
            tags_per_card.append(list(heading_stack))
    return tags_per_card

def parse_cards_with_tags(md):
    tags_per_card = extract_heading_tags(md)
    cards = []
    blocks = md.split('#kk')
    tag_idx = 0
    for block in blocks:
        block = block.strip()
        if not block:
            continue
        parts = re.split(r'\s*%\s*', block, maxsplit=1)
        if len(parts) < 2:
            continue  # skip if not both delimiters present
        front = parts[0].strip()
        back = parts[1].strip()
        back_parts = re.split(r'\s*%\s*', back, maxsplit=1)
        back = back_parts[0].strip()
        if front:  # <-- allow empty back
            tags = [t.replace(' ', '_') for t in tags_per_card[tag_idx]] if tag_idx < len(tags_per_card) else []
            cards.append((front, back, tags))
        tag_idx += 1
    return cards

def main(md_path, output_apkg, verbose=False):
    if verbose:
        print(f"Reading markdown file: {md_path}")
    with open(md_path, encoding='utf-8') as f:
        md = f.read()

    md = convert_latex(md)
    cards = parse_cards_with_tags(md)
    if verbose:
        print(f"Found {len(cards)} cards.")

    # Get filename (without extension), replace spaces with underscores
    filename_tag = os.path.splitext(os.path.basename(md_path))[0].replace(' ', '_')

    media_files = {}
    all_media = set()
    for front, back, _ in cards:
        all_media |= extract_image_paths(front)
        all_media |= extract_image_paths(back)

    for path in all_media:
        media_files[path] = Path(path).name

    model = genanki.Model(
        1607392319,
        'Simple Model',
        fields=[
            {'name': 'Front'},
            {'name': 'Back'},
            {'name': 'Tags'},  # <-- Add this line
        ],
        templates=[{
            'name': 'Card 1',
            'qfmt': '{{Tags}}<br><br>{{Front}}',  # <-- Show tags on the front
            'afmt': '{{Back}}',
        }],
    )

    cloze_model = genanki.Model(
        998877661,
        'Cloze Model',
        fields=[
            {'name': 'Text'},
            {'name': 'BackExtra'},
        ],
        templates=[
            {
                'name': 'Cloze Card',
                'qfmt': '{{cloze:Text}}',
                'afmt': '{{cloze:Text}}<br>{{BackExtra}}',
            },
        ],
        model_type=genanki.Model.CLOZE,
    )

    deck = genanki.Deck(2059400110, 'My Deck')
    media_list = []

    for i, (front, back, tags) in enumerate(cards, 1):
        front_html = replace_images_with_anki(front, media_files)
        back_html = replace_images_with_anki(back, media_files)
        tags_with_filename = tags + [filename_tag]
        tags_field = ' '.join(tags_with_filename)

        if is_cloze(front_html):
            # Cloze model expects fields: [Text, BackExtra]
            note = genanki.Note(
                model=cloze_model,
                fields=[front_html, back_html],
                tags=tags_with_filename
            )
        else:
            # Basic model expects fields: [Front, Back, Tags]
            note = genanki.Note(
                model=model,
                fields=[front_html, back_html, tags_field],
                tags=tags_with_filename
            )
        deck.add_note(note)
        if verbose:
            print(f"Added card {i}: Front length {len(front_html)}, Back length {len(back_html)}, Tags: {tags_with_filename}")
            front_imgs = list(extract_image_paths(front))
            back_imgs = list(extract_image_paths(back))
            if front_imgs:
                print(f"  Images on front: {', '.join(front_imgs)}")
            if back_imgs:
                print(f"  Images on back: {', '.join(back_imgs)}")
    for src, fname in media_files.items():
        if Path(src).exists():
            media_list.append(src)
            if verbose:
                print(f"Including media: {src}")
        elif verbose:
            print(f"Warning: Media file not found: {src}")

    import tempfile
    local_output = '/tmp/output.apkg'
    genanki.Package(deck, media_files=media_list).write_to_file(local_output)
    if verbose:
        print(f"Deck written to temporary file {local_output}")
    shutil.move(local_output, output_apkg)
    print(f"Deck moved to {output_apkg}")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Convert markdown with #kk/% delimiters to an Anki .apkg deck. Supports images and LaTeX.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('input_md', help='Input markdown file')
    parser.add_argument('output_apkg', nargs='?', help='Output .apkg file (default: same name as input)')
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose output')
    args = parser.parse_args()

    input_md = args.input_md
    if args.output_apkg:
        output_apkg = args.output_apkg
    else:
        base = os.path.splitext(input_md)[0]
        output_apkg = base + '.apkg'

    main(input_md, output_apkg, verbose=args.verbose)